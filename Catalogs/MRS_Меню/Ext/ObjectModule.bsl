
// Модуль объекта справочника MRS_Меню
// Обработка событий объекта, валидация и автозаполнение полей

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Валидация данных
	ВыполнитьВалидациюДанных(Отказ);
	
	// Автозаполнение полей
	Если НЕ Отказ Тогда
		
		ЗаполнитьПоляАвтоматически();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Дополнительные действия при записи
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	// При копировании очищаем НомерПозиции, так как он должен быть уникальным
	НомерПозиции = "";
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьВалидациюДанных(Отказ)
	
	// Валидация для группы
	Если ЭтоГруппа Тогда
		
		// Для группы обязательна семейная группа
		Если НЕ ЗначениеЗаполнено(СемейнаяГруппа) Тогда
			
			ОбщегоНазначения.СообщитьПользователю("Для группы меню обязательно заполнение семейной группы", 
				ЭтотОбъект, "СемейнаяГруппа", , Отказ);
			
		КонецЕсли;
		
		// Для группы не должны быть заполнены реквизиты позиции
		Если ЗначениеЗаполнено(Номенклатура) ИЛИ ЗначениеЗаполнено(МажорнаяГруппа) ИЛИ ЗначениеЗаполнено(КлассМеню) Тогда
			
			ОбщегоНазначения.СообщитьПользователю("Для группы не должны быть заполнены реквизиты позиции меню", 
				ЭтотОбъект, , , Отказ);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	// Валидация для позиции меню
	
	// Проверка обязательного владельца
	Если НЕ ЗначениеЗаполнено(Владелец) Тогда
		
		ОбщегоНазначения.СообщитьПользователю("Не указана Касса ККМ (Владелец)", ЭтотОбъект, "Владелец", , Отказ);
		
	КонецЕсли;
	
	// Проверка наличия родителя (позиция не может быть создана вне группы)
	Если НЕ ЗначениеЗаполнено(Родитель) Тогда
		
		ОбщегоНазначения.СообщитьПользователю("Позиция меню должна находиться в группе. Выберите родителя", 
			ЭтотОбъект, "Родитель", , Отказ);
		
	КонецЕсли;
	
	// Проверка, что родитель является группой
	Если ЗначениеЗаполнено(Родитель) Тогда
		
		РодительЭтоГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "ЭтоГруппа");
		
		Если НЕ РодительЭтоГруппа Тогда
			
			ОбщегоНазначения.СообщитьПользователю("Родитель должен быть группой", ЭтотОбъект, "Родитель", , Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка обязательных полей
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		
		ОбщегоНазначения.СообщитьПользователю("Не заполнена номенклатура", ЭтотОбъект, "Номенклатура", , Отказ);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МажорнаяГруппа) Тогда
		
		ОбщегоНазначения.СообщитьПользователю("Не заполнена мажорная группа", ЭтотОбъект, "МажорнаяГруппа", , Отказ);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КлассМеню) Тогда
		
		ОбщегоНазначения.СообщитьПользователю("Не заполнен класс меню", ЭтотОбъект, "КлассМеню", , Отказ);
		
	КонецЕсли;
	
	// Семейная группа должна быть унаследована от родителя
	Если НЕ ЗначениеЗаполнено(СемейнаяГруппа) Тогда
		
		ОбщегоНазначения.СообщитьПользователю("Семейная группа не унаследована от родителя", 
			ЭтотОбъект, "СемейнаяГруппа", , Отказ);
		
	КонецЕсли;
	
	// Проверка уникальности НомерПозиции
	Если ЗначениеЗаполнено(НомерПозиции) Тогда
		
		ПроверитьУникальностьНомераПозиции(Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоляАвтоматически()
	
	// Пропускаем автозаполнение для групп
	Если ЭтоГруппа Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Установка IDСтруктурыSimphony по умолчанию
	Если НЕ ЗначениеЗаполнено(IDСтруктурыSimphony) Тогда
		
		IDСтруктурыSimphony = 1;
		
	КонецЕсли;
	
	// Автозаполнение наименования из номенклатуры
	Если ЗначениеЗаполнено(Номенклатура) И ПустаяСтрока(Наименование) Тогда
		
		Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Наименование");
		
	КонецЕсли;
	
	// Наследование семейной группы от родителя
	Если ЗначениеЗаполнено(Родитель) И НЕ ЗначениеЗаполнено(СемейнаяГруппа) Тогда
		
		СемейнаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "СемейнаяГруппа");
		
	КонецЕсли;
	
	// Генерация НомерПозиции по правилу PRD
	Если НЕ ЗначениеЗаполнено(НомерПозиции) И ЗначениеЗаполнено(МажорнаяГруппа) И ЗначениеЗаполнено(СемейнаяГруппа) Тогда
		
		НомерПозиции = СгенерироватьНомерПозиции();
		
	КонецЕсли;
	
КонецПроцедуры

Функция СгенерироватьНомерПозиции()
	
	// Генерация stringNumberId по правилу PRD:
	// stringNumberId = <MajorGroupID:1-2 знака> + <zero-pad до длины 6 символов> + <FamilyGroupID:3 знака>
	// Итоговая длина: 9 символов
	
	// Получение НомерОбъекта мажорной и семейной групп
	МажорнаяГруппаНомер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МажорнаяГруппа, "НомерОбъекта");
	СемейнаяГруппаНомер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СемейнаяГруппа, "НомерОбъекта");
	
	Если НЕ ЗначениеЗаполнено(МажорнаяГруппаНомер) ИЛИ НЕ ЗначениеЗаполнено(СемейнаяГруппаНомер) Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	// Формирование номера позиции
	// Мажорная группа - первые 1-2 знака (первая цифра номера)
	МажорнаяГруппаID = Формат(Цел(МажорнаяГруппаНомер / 1000000), "ЧГ=0");
	
	// Средняя часть - нули для заполнения до 6 символов
	СредняяЧасть = "00000";
	
	// Семейная группа - последние 3 знака
	СемейнаяГруппаID = Формат(СемейнаяГруппаНомер % 1000, "ЧЦ=3; ЧВН=; ЧГ=0");
	
	НомерПозиции = МажорнаяГруппаID + СредняяЧасть + СемейнаяГруппаID;
	
	// Проверка, что номер еще не занят, и генерация следующего при необходимости
	СчетчикПопыток = 0;
	
	Пока ПроверитьСуществованиеНомераПозиции(НомерПозиции) И СчетчикПопыток < 1000 Цикл
		
		СчетчикПопыток = СчетчикПопыток + 1;
		
		// Увеличиваем среднюю часть на 1
		СредняяЧастьЧисло = Число(Сред(НомерПозиции, 2, 5)) + 1;
		СредняяЧасть = Формат(СредняяЧастьЧисло, "ЧЦ=5; ЧВН=; ЧГ=0");
		
		НомерПозиции = МажорнаяГруппаID + СредняяЧасть + СемейнаяГруппаID;
		
	КонецЦикла;
	
	Возврат НомерПозиции;
	
КонецФункции

Функция ПроверитьСуществованиеНомераПозиции(ПроверяемыйНомер)
	
	// Проверка существования позиции с таким номером
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	MRS_Меню.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.MRS_Меню КАК MRS_Меню
		|ГДЕ
		|	MRS_Меню.НомерПозиции = &НомерПозиции
		|	И MRS_Меню.Ссылка <> &ТекущаяСсылка";
	
	Запрос.УстановитьПараметр("НомерПозиции", ПроверяемыйНомер);
	Запрос.УстановитьПараметр("ТекущаяСсылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

Процедура ПроверитьУникальностьНомераПозиции(Отказ)
	
	// Проверка уникальности НомерПозиции
	Если ПроверитьСуществованиеНомераПозиции(НомерПозиции) Тогда
		
		ОбщегоНазначения.СообщитьПользователю("Номер позиции """ + НомерПозиции + """ уже используется другой позицией меню", 
			ЭтотОбъект, "НомерПозиции", , Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

