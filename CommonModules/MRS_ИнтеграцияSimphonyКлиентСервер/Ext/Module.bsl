// Общий модуль MRS_ИнтеграцияSimphonyКлиентСервер
// Назначение: Клиент-серверные функции для интеграции с Simphony REST API
// Содержит: настройки интеграции, формирование заголовков, валидация данных, работа с категориями мажорных групп

#Область ПрограммныйИнтерфейс

#Область НастройкиИнтеграции

// Получает настройки интеграции с Simphony из констант конфигурации
//
// Возвращаемое значение:
//   Структура - структура с настройками интеграции:
//     * БазовыйURL - Строка - базовый URL для запросов к API Simphony
//     * Таймаут - Число - таймаут запросов в секундах
//     * ИспользоватьИнтеграцию - Булево - флаг использования интеграции
//     * IDПользователяПоУмолчанию - Строка - ID пользователя по умолчанию для заголовка X-User-Id
//
Функция ПолучитьНастройкиИнтеграции() Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("БазовыйURL", "");
	Настройки.Вставить("Таймаут", 30);
	Настройки.Вставить("ИспользоватьИнтеграцию", Ложь);
	Настройки.Вставить("IDПользователяПоУмолчанию", "");
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Настройки.БазовыйURL = Константы.MRS_БазовыйURLSimphony.Получить();
		Настройки.Таймаут = Константы.MRS_ТаймаутЗапросовSimphony.Получить();
		Настройки.ИспользоватьИнтеграцию = Константы.MRS_ИспользоватьИнтеграциюSimphony.Получить();
		Настройки.IDПользователяПоУмолчанию = Константы.MRS_IDПользователяПоУмолчанию.Получить();
		
		Если Настройки.Таймаут = 0 Тогда
			
			Настройки.Таймаут = 30;
			
		КонецЕсли;
	#КонецЕсли
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область ФормированиеЗаголовков

// Формирует заголовки HTTP-запроса для Simphony API
//
// Параметры:
//   IDПользователя - Строка - идентификатор пользователя для заголовка X-User-Id.
//                              Если не указан, используется значение по умолчанию из настроек
//
// Возвращаемое значение:
//   Соответствие - соответствие заголовков HTTP-запроса:
//     * X-User-Id - Строка - идентификатор пользователя (обязательный)
//     * X-Correlation-Id - Строка - идентификатор корреляции для трассировки
//     * X-Request-Id - Строка - уникальный идентификатор запроса для идемпотентности
//     * Content-Type - Строка - тип контента (application/json)
//     * Accept - Строка - принимаемый тип (application/json)
//
Функция СформироватьЗаголовкиЗапроса(IDПользователя = "") Экспорт
	
	Заголовки = Новый Соответствие;
	
	// Получаем ID пользователя
	IDПользователяИтоговый = IDПользователя;
	Если ПустаяСтрока(IDПользователяИтоговый) Тогда
		
		Настройки = ПолучитьНастройкиИнтеграции();
		IDПользователяИтоговый = Настройки.IDПользователяПоУмолчанию;
		
	КонецЕсли;
	
	// Генерируем уникальные идентификаторы для трассировки и идемпотентности
	CorrelationID = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
	RequestID = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
	
	// Обязательные заголовки
	Заголовки.Вставить("X-User-Id", IDПользователяИтоговый);
	Заголовки.Вставить("X-Correlation-Id", CorrelationID);
	Заголовки.Вставить("X-Request-Id", RequestID);
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Accept", "application/json");
	
	Возврат Заголовки;
	
КонецФункции

#КонецОбласти

#Область ВалидацияДанных

// Валидирует данные позиции меню перед отправкой в Simphony
//
// Параметры:
//   ДанныеПозиции - Структура - данные позиции меню для валидации:
//     * stringNumberId - Строка - номер позиции (обязательно)
//     * name - Строка - наименование (обязательно)
//     * majorGroupId - Число - ID мажорной группы (обязательно)
//     * familyGroupId - Число - ID семейной группы (обязательно)
//     * classItemId - Число - ID класса меню (обязательно)
//     * hierStrucId - Число - ID структуры (обязательно, должен быть 1)
//     * isVisible - Булево - видимость (опционально)
//     * fileNum - Число - номер в меню (опционально)
//
// Возвращаемое значение:
//   Структура - результат валидации:
//     * Успех - Булево - Истина, если валидация пройдена
//     * ТекстОшибки - Строка - текст ошибки валидации (если Успех = Ложь)
//
Функция ВалидироватьДанныеПозиции(ДанныеПозиции) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Истина);
	Результат.Вставить("ТекстОшибки", "");
	
	ОшибкиВалидации = Новый Массив;
	
	// Проверка обязательных полей
	Если НЕ ДанныеПозиции.Свойство("stringNumberId") ИЛИ ПустаяСтрока(ДанныеПозиции.stringNumberId) Тогда
		
		ОшибкиВалидации.Добавить("Не заполнено поле 'stringNumberId' (номер позиции)");
		
	ИначеЕсли СтрДлина(ДанныеПозиции.stringNumberId) <> 9 Тогда
		
		ТекстОшибки = СтрШаблон(
			"Поле 'stringNumberId' должно содержать ровно 9 символов (текущая длина: %1)",
			СтрДлина(ДанныеПозиции.stringNumberId));
		ОшибкиВалидации.Добавить(ТекстОшибки);
		
	КонецЕсли;
	
	Если НЕ ДанныеПозиции.Свойство("name") ИЛИ ПустаяСтрока(ДанныеПозиции.name) Тогда
		
		ОшибкиВалидации.Добавить("Не заполнено поле 'name' (наименование)");
		
	КонецЕсли;
	
	Если НЕ ДанныеПозиции.Свойство("majorGroupId") ИЛИ ДанныеПозиции.majorGroupId = 0 Тогда
		
		ОшибкиВалидации.Добавить("Не заполнено поле 'majorGroupId' (ID мажорной группы)");
		
	КонецЕсли;
	
	Если НЕ ДанныеПозиции.Свойство("familyGroupId") ИЛИ ДанныеПозиции.familyGroupId = 0 Тогда
		
		ОшибкиВалидации.Добавить("Не заполнено поле 'familyGroupId' (ID семейной группы)");
		
	КонецЕсли;
	
	Если НЕ ДанныеПозиции.Свойство("classItemId") ИЛИ ДанныеПозиции.classItemId = 0 Тогда
		
		ОшибкиВалидации.Добавить("Не заполнено поле 'classItemId' (ID класса меню)");
		
	КонецЕсли;
	
	Если НЕ ДанныеПозиции.Свойство("hierStrucId") ИЛИ ДанныеПозиции.hierStrucId <> 1 Тогда
		
		ОшибкиВалидации.Добавить("Поле 'hierStrucId' должно быть равно 1");
		
	КонецЕсли;
	
	// Формируем результат
	Если ОшибкиВалидации.Количество() > 0 Тогда
		
		Результат.Успех = Ложь;
		Результат.ТекстОшибки = СтрСоединить(ОшибкиВалидации, Символы.ПС);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСКатегориями

// Определяет категорию мажорной группы по номеру объекта
//
// Параметры:
//   НомерГруппы - Число - номер мажорной группы (objectNumber)
//
// Возвращаемое значение:
//   ПеречислениеСсылка.MRS_КатегорииМажорныхГрупп - категория мажорной группы по диапазону номеров:
//     * 1000000-1999999 - Еда
//     * 2000000-2999999 - Алкогольные напитки
//     * 3000000-3999999 - Безалкогольные напитки
//     * 4000000+ - Прочее
//
Функция ОпределитьКатегориюПоНомеруМажорнойГруппы(НомерГруппы) Экспорт
	
	Если НомерГруппы >= 1000000 И НомерГруппы <= 1999999 Тогда
		
		Возврат Перечисления.MRS_КатегорииМажорныхГрупп.Еда_1000000_1999999;
		
	ИначеЕсли НомерГруппы >= 2000000 И НомерГруппы <= 2999999 Тогда
		
		Возврат Перечисления.MRS_КатегорииМажорныхГрупп.АлкогольныеНапитки_2000000_2999999;
		
	ИначеЕсли НомерГруппы >= 3000000 И НомерГруппы <= 3999999 Тогда
		
		Возврат Перечисления.MRS_КатегорииМажорныхГрупп.БезалкогольныеНапитки_3000000_3999999;
		
	Иначе
		
		Возврат Перечисления.MRS_КатегорииМажорныхГрупп.Прочее_4000000;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ФормированиеНомераПозиции

// Формирует stringNumberId для позиции меню по правилу PRD
// Правило: <MajorGroupID:1-2 знака> + <zero-pad до длины 6 символов> + <FamilyGroupID:3 знака>
//
// Параметры:
//   MajorGroupID - Число - ID мажорной группы (objectNumber)
//   FamilyGroupID - Число - ID семейной группы (objectNumber)
//
// Возвращаемое значение:
//   Строка - строка длиной 9 символов, уникальная для hierStrucId
//
// Пример:
//   СформироватьНомерПозиции(2, 103) вернет "200000103"
//
Функция СформироватьНомерПозиции(MajorGroupID, FamilyGroupID) Экспорт
	
	// Берем 1-2 первых цифры MajorGroupID
	СтрокаMajorID = Формат(MajorGroupID, "ЧГ=");
	ПервыеДваЗнака = Лев(СтрокаMajorID, 2);
	
	// FamilyGroupID дополняем нулями слева до 3 символов
	СтрокаFamilyID = Формат(FamilyGroupID, "ЧЦ=3; ЧВН=; ЧГ=");
	
	// Формируем итоговый номер: первые 2 символа + 4 нуля + 3 символа FamilyID = 9 символов
	Результат = ПервыеДваЗнака + "0000" + СтрокаFamilyID;
	
	// Проверяем длину (должна быть ровно 9 символов)
	Если СтрДлина(Результат) <> 9 Тогда
		
		// Подгоняем до 9 символов
		Если СтрДлина(Результат) < 9 Тогда
			
			Результат = Результат + Строка("000000000");
			Результат = Лев(Результат, 9);
			
		Иначе
			
			Результат = Лев(Результат, 9);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

