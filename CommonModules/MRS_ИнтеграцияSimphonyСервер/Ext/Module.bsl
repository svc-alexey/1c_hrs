// Общий модуль MRS_ИнтеграцияSimphonyСервер
// Назначение: Серверные функции для интеграции с Simphony REST API
// Содержит: HTTP-запросы к API, создание/обновление/удаление позиций меню, загрузка справочников

#Область ПрограммныйИнтерфейс

#Область РаботаСПозициямиМеню

// Создает или обновляет позицию меню в Simphony через PUT /menu-item
//
// Параметры:
//   ЭлементМеню - СправочникСсылка.MRS_Меню - ссылка на позицию меню
//   ДополнительныеПараметры - Структура - дополнительные параметры (опционально)
//
// Возвращаемое значение:
//   Структура - результат операции:
//     * Успех - Булево - успешность операции
//     * КодОтвета - Число - HTTP код ответа
//     * ТекстОшибки - Строка - текст ошибки (если есть)
//     * IDЗапроса - Строка - X-Request-Id
//     * IDКорреляции - Строка - X-Correlation-Id
//
Функция СоздатьПозициюМеню(ЭлементМеню, ДополнительныеПараметры = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("КодОтвета", 0);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("IDЗапроса", "");
	Результат.Вставить("IDКорреляции", "");
	
	// Проверяем настройки интеграции
	Настройки = MRS_ИнтеграцияSimphonyКлиентСервер.ПолучитьНастройкиИнтеграции();
	
	Если НЕ Настройки.ИспользоватьИнтеграцию Тогда
		
		Результат.ТекстОшибки = "Интеграция с Simphony отключена в настройках";
		Возврат Результат;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Настройки.БазовыйURL) Тогда
		
		Результат.ТекстОшибки = "Не указан базовый URL Simphony в настройках";
		Возврат Результат;
		
	КонецЕсли;
	
	// Формируем данные позиции для отправки
	ДанныеПозиции = СформироватьДанныеПозицииДляAPI(ЭлементМеню);
	
	Если ДанныеПозиции = Неопределено Тогда
		
		Результат.ТекстОшибки = "Не удалось сформировать данные позиции меню";
		Возврат Результат;
		
	КонецЕсли;
	
	// Валидируем данные
	РезультатВалидации = MRS_ИнтеграцияSimphonyКлиентСервер.ВалидироватьДанныеПозиции(ДанныеПозиции);
	
	Если НЕ РезультатВалидации.Успех Тогда
		
		Результат.ТекстОшибки = РезультатВалидации.ТекстОшибки;
		Возврат Результат;
		
	КонецЕсли;
	
	// Формируем JSON
	JSONСтрока = СформироватьJSONПозиции(ДанныеПозиции);
	
	// Выполняем HTTP-запрос
	РезультатЗапроса = ВыполнитьHTTPЗапрос("PUT", "/menu-item", JSONСтрока, Настройки);
	
	// Обрабатываем результат
	Результат.Успех = (РезультатЗапроса.КодОтвета >= 200 И РезультатЗапроса.КодОтвета < 300);
	Результат.КодОтвета = РезультатЗапроса.КодОтвета;
	Результат.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
	Результат.IDЗапроса = РезультатЗапроса.IDЗапроса;
	Результат.IDКорреляции = РезультатЗапроса.IDКорреляции;
	
	// Логируем операцию
	MRS_ЛогированиеИнтеграцииСервер.ЗаписатьЛогИнтеграции(
		"Создание/обновление позиции меню",
		"MRS_Меню",
		"PUT",
		Настройки.БазовыйURL + "/menu-item",
		РезультатЗапроса.КодОтвета,
		JSONСтрока,
		РезультатЗапроса.ТелоОтвета,
		РезультатЗапроса.ВремяВыполнения);
	
	// Обновляем статус синхронизации
	Если Результат.Успех Тогда
		
		MRS_ЛогированиеИнтеграцииСервер.ОбновитьСтатусСинхронизации(
			ЭлементМеню,
			Перечисления.MRS_СтатусыСинхронизации.Синхронизировано,
			"",
			Результат.IDЗапроса,
			Результат.IDКорреляции);
		
	Иначе
		
		MRS_ЛогированиеИнтеграцииСервер.ОбновитьСтатусСинхронизации(
			ЭлементМеню,
			Перечисления.MRS_СтатусыСинхронизации.Ошибка,
			Результат.ТекстОшибки,
			Результат.IDЗапроса,
			Результат.IDКорреляции);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Создает или обновляет несколько позиций меню пакетно через POST /menu-items
//
// Параметры:
//   МассивЭлементов - Массив из СправочникСсылка.MRS_Меню - массив ссылок на позиции меню
//   IDТочкиПродаж - Число - ID иерархической структуры (всегда 1 по PRD)
//
// Возвращаемое значение:
//   Структура - результат операции (аналогично СоздатьПозициюМеню)
//
Функция СоздатьПозицииМенюПакетно(МассивЭлементов, IDТочкиПродаж = 1) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("КодОтвета", 0);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("IDЗапроса", "");
	Результат.Вставить("IDКорреляции", "");
	
	Если МассивЭлементов.Количество() = 0 Тогда
		
		Результат.ТекстОшибки = "Не передано ни одной позиции для синхронизации";
		Возврат Результат;
		
	КонецЕсли;
	
	// Проверяем настройки
	Настройки = MRS_ИнтеграцияSimphonyКлиентСервер.ПолучитьНастройкиИнтеграции();
	
	Если НЕ Настройки.ИспользоватьИнтеграцию Тогда
		
		Результат.ТекстОшибки = "Интеграция с Simphony отключена в настройках";
		Возврат Результат;
		
	КонецЕсли;
	
	// Формируем массив данных позиций
	МассивДанных = Новый Массив;
	
	Для Каждого ЭлементМеню Из МассивЭлементов Цикл
		
		ДанныеПозиции = СформироватьДанныеПозицииДляAPI(ЭлементМеню);
		
		Если ДанныеПозиции <> Неопределено Тогда
			
			МассивДанных.Добавить(ДанныеПозиции);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивДанных.Количество() = 0 Тогда
		
		Результат.ТекстОшибки = "Не удалось сформировать данные ни для одной позиции";
		Возврат Результат;
		
	КонецЕсли;
	
	// Формируем JSON для пакетного запроса
	JSONСтрока = СформироватьJSONПакетаПозиций(МассивДанных, IDТочкиПродаж);
	
	// Выполняем HTTP-запрос
	РезультатЗапроса = ВыполнитьHTTPЗапрос("POST", "/menu-items", JSONСтрока, Настройки);
	
	// Обрабатываем результат
	Результат.Успех = (РезультатЗапроса.КодОтвета >= 200 И РезультатЗапроса.КодОтвета < 300);
	Результат.КодОтвета = РезультатЗапроса.КодОтвета;
	Результат.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
	Результат.IDЗапроса = РезультатЗапроса.IDЗапроса;
	Результат.IDКорреляции = РезультатЗапроса.IDКорреляции;
	
	// Логируем
	MRS_ЛогированиеИнтеграцииСервер.ЗаписатьЛогИнтеграции(
		СтрШаблон("Пакетное создание позиций меню (%1 шт.)", МассивЭлементов.Количество()),
		"MRS_Меню",
		"POST",
		Настройки.БазовыйURL + "/menu-items",
		РезультатЗапроса.КодОтвета,
		JSONСтрока,
		РезультатЗапроса.ТелоОтвета,
		РезультатЗапроса.ВремяВыполнения);
	
	// Обновляем статусы
	Если Результат.Успех Тогда
		
		MRS_ЛогированиеИнтеграцииСервер.УстановитьСтатусСинхронизировано(
			МассивЭлементов,
			Результат.IDЗапроса,
			Результат.IDКорреляции);
		
	Иначе
		
		MRS_ЛогированиеИнтеграцииСервер.УстановитьСтатусОшибка(
			МассивЭлементов,
			Результат.ТекстОшибки,
			Результат.IDЗапроса,
			Результат.IDКорреляции);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Удаляет позицию меню из Simphony через DELETE /menu-item
//
// Параметры:
//   НомерПозиции - Строка - stringNumberId позиции (9 символов)
//
// Возвращаемое значение:
//   Структура - результат операции (аналогично СоздатьПозициюМеню)
//
Функция УдалитьПозициюМеню(НомерПозиции) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("КодОтвета", 0);
	Результат.Вставить("ТекстОшибки", "");
	
	Настройки = MRS_ИнтеграцияSimphonyКлиентСервер.ПолучитьНастройкиИнтеграции();
	
	Если НЕ Настройки.ИспользоватьИнтеграцию Тогда
		
		Результат.ТекстОшибки = "Интеграция с Simphony отключена";
		Возврат Результат;
		
	КонецЕсли;
	
	АдресРесурса = СтрШаблон("/menu-item/%1", НомерПозиции);
	РезультатЗапроса = ВыполнитьHTTPЗапрос("DELETE", АдресРесурса, "", Настройки);
	
	Результат.Успех = (РезультатЗапроса.КодОтвета >= 200 И РезультатЗапроса.КодОтвета < 300);
	Результат.КодОтвета = РезультатЗапроса.КодОтвета;
	Результат.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
	
	// Логируем
	MRS_ЛогированиеИнтеграцииСервер.ЗаписатьЛогИнтеграции(
		"Удаление позиции меню",
		"MRS_Меню",
		"DELETE",
		Настройки.БазовыйURL + АдресРесурса,
		РезультатЗапроса.КодОтвета,
		"",
		РезультатЗапроса.ТелоОтвета,
		РезультатЗапроса.ВремяВыполнения);
	
	Возврат Результат;
	
КонецФункции

// Получает информацию о позиции меню из Simphony через GET /menu-item
//
// Параметры:
//   НомерПозиции - Строка - stringNumberId позиции (9 символов)
//
// Возвращаемое значение:
//   Структура - результат операции с данными позиции
//
Функция ПолучитьПозициюМеню(НомерПозиции) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("КодОтвета", 0);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("Данные", Неопределено);
	
	Настройки = MRS_ИнтеграцияSimphonyКлиентСервер.ПолучитьНастройкиИнтеграции();
	
	Если НЕ Настройки.ИспользоватьИнтеграцию Тогда
		
		Результат.ТекстОшибки = "Интеграция с Simphony отключена";
		Возврат Результат;
		
	КонецЕсли;
	
	АдресРесурса = СтрШаблон("/menu-item/%1", НомерПозиции);
	РезультатЗапроса = ВыполнитьHTTPЗапрос("GET", АдресРесурса, "", Настройки);
	
	Результат.Успех = (РезультатЗапроса.КодОтвета >= 200 И РезультатЗапроса.КодОтвета < 300);
	Результат.КодОтвета = РезультатЗапроса.КодОтвета;
	Результат.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
	
	Если Результат.Успех Тогда
		
		Попытка
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(РезультатЗапроса.ТелоОтвета);
			Результат.Данные = ПрочитатьJSON(ЧтениеJSON, Ложь);
			ЧтениеJSON.Закрыть();
		Исключение
			Результат.Успех = Ложь;
			Результат.ТекстОшибки = СтрШаблон("Ошибка разбора JSON: %1", ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
	// Логируем
	MRS_ЛогированиеИнтеграцииСервер.ЗаписатьЛогИнтеграции(
		"Получение позиции меню",
		"MRS_Меню",
		"GET",
		Настройки.БазовыйURL + АдресРесурса,
		РезультатЗапроса.КодОтвета,
		"",
		РезультатЗапроса.ТелоОтвета,
		РезультатЗапроса.ВремяВыполнения);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаСправочников

// Загружает мажорные группы из Simphony через GET /referencedata/major-groups
//
// Возвращаемое значение:
//   Структура - результат операции:
//     * Успех - Булево
//     * КоличествоЗагружено - Число
//     * ТекстОшибки - Строка
//
Функция ЗагрузитьМажорныеГруппы() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("КоличествоЗагружено", 0);
	Результат.Вставить("ТекстОшибки", "");
	
	Настройки = MRS_ИнтеграцияSimphonyКлиентСервер.ПолучитьНастройкиИнтеграции();
	
	Если НЕ Настройки.ИспользоватьИнтеграцию Тогда
		
		Результат.ТекстОшибки = "Интеграция с Simphony отключена";
		Возврат Результат;
		
	КонецЕсли;
	
	РезультатЗапроса = ВыполнитьHTTPЗапрос("GET", "/referencedata/major-groups", "", Настройки);
	
	// Логируем
	MRS_ЛогированиеИнтеграцииСервер.ЗаписатьЛогИнтеграции(
		"Загрузка мажорных групп",
		"MRS_МажорнаяГруппа",
		"GET",
		Настройки.БазовыйURL + "/referencedata/major-groups",
		РезультатЗапроса.КодОтвета,
		"",
		РезультатЗапроса.ТелоОтвета,
		РезультатЗапроса.ВремяВыполнения);
	
	Если РезультатЗапроса.КодОтвета < 200 ИЛИ РезультатЗапроса.КодОтвета >= 300 Тогда
		
		Результат.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
		Возврат Результат;
		
	КонецЕсли;
	
	// Разбираем JSON и создаем элементы справочника
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(РезультатЗапроса.ТелоОтвета);
		МассивГрупп = ПрочитатьJSON(ЧтениеJSON, Ложь);
		ЧтениеJSON.Закрыть();
		
		Счетчик = 0;
		
		Для Каждого ЭлементГруппы Из МассивГрупп Цикл
			
			Если ОбновитьМажорнуюГруппу(ЭлементГруппы) Тогда
				
				Счетчик = Счетчик + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Результат.Успех = Истина;
		Результат.КоличествоЗагружено = Счетчик;
		
	Исключение
		Результат.ТекстОшибки = СтрШаблон("Ошибка обработки данных: %1", ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Загружает семейные группы из Simphony через GET /referencedata/family-groups
//
// Возвращаемое значение:
//   Структура - результат операции (аналогично ЗагрузитьМажорныеГруппы)
//
Функция ЗагрузитьСемейныеГруппы() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("КоличествоЗагружено", 0);
	Результат.Вставить("ТекстОшибки", "");
	
	Настройки = MRS_ИнтеграцияSimphonyКлиентСервер.ПолучитьНастройкиИнтеграции();
	
	Если НЕ Настройки.ИспользоватьИнтеграцию Тогда
		
		Результат.ТекстОшибки = "Интеграция с Simphony отключена";
		Возврат Результат;
		
	КонецЕсли;
	
	РезультатЗапроса = ВыполнитьHTTPЗапрос("GET", "/referencedata/family-groups", "", Настройки);
	
	// Логируем
	MRS_ЛогированиеИнтеграцииСервер.ЗаписатьЛогИнтеграции(
		"Загрузка семейных групп",
		"MRS_СемейнаяГруппа",
		"GET",
		Настройки.БазовыйURL + "/referencedata/family-groups",
		РезультатЗапроса.КодОтвета,
		"",
		РезультатЗапроса.ТелоОтвета,
		РезультатЗапроса.ВремяВыполнения);
	
	Если РезультатЗапроса.КодОтвета < 200 ИЛИ РезультатЗапроса.КодОтвета >= 300 Тогда
		
		Результат.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
		Возврат Результат;
		
	КонецЕсли;
	
	// Разбираем JSON
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(РезультатЗапроса.ТелоОтвета);
		МассивГрупп = ПрочитатьJSON(ЧтениеJSON, Ложь);
		ЧтениеJSON.Закрыть();
		
		Счетчик = 0;
		
		Для Каждого ЭлементГруппы Из МассивГрупп Цикл
			
			Если ОбновитьСемейнуюГруппу(ЭлементГруппы) Тогда
				
				Счетчик = Счетчик + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Результат.Успех = Истина;
		Результат.КоличествоЗагружено = Счетчик;
		
	Исключение
		Результат.ТекстОшибки = СтрШаблон("Ошибка обработки данных: %1", ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Загружает классы меню из Simphony через GET /referencedata/reportgroup
//
// Возвращаемое значение:
//   Структура - результат операции (аналогично ЗагрузитьМажорныеГруппы)
//
Функция ЗагрузитьКлассыМеню() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("КоличествоЗагружено", 0);
	Результат.Вставить("ТекстОшибки", "");
	
	Настройки = MRS_ИнтеграцияSimphonyКлиентСервер.ПолучитьНастройкиИнтеграции();
	
	Если НЕ Настройки.ИспользоватьИнтеграцию Тогда
		
		Результат.ТекстОшибки = "Интеграция с Simphony отключена";
		Возврат Результат;
		
	КонецЕсли;
	
	РезультатЗапроса = ВыполнитьHTTPЗапрос("GET", "/referencedata/reportgroup", "", Настройки);
	
	// Логируем
	MRS_ЛогированиеИнтеграцииСервер.ЗаписатьЛогИнтеграции(
		"Загрузка классов меню",
		"MRS_КлассМеню",
		"GET",
		Настройки.БазовыйURL + "/referencedata/reportgroup",
		РезультатЗапроса.КодОтвета,
		"",
		РезультатЗапроса.ТелоОтвета,
		РезультатЗапроса.ВремяВыполнения);
	
	Если РезультатЗапроса.КодОтвета < 200 ИЛИ РезультатЗапроса.КодОтвета >= 300 Тогда
		
		Результат.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
		Возврат Результат;
		
	КонецЕсли;
	
	// Разбираем JSON
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(РезультатЗапроса.ТелоОтвета);
		МассивКлассов = ПрочитатьJSON(ЧтениеJSON, Ложь);
		ЧтениеJSON.Закрыть();
		
		Счетчик = 0;
		
		Для Каждого ЭлементКласса Из МассивКлассов Цикл
			
			Если ОбновитьКлассМеню(ЭлементКласса) Тогда
				
				Счетчик = Счетчик + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Результат.Успех = Истина;
		Результат.КоличествоЗагружено = Счетчик;
		
	Исключение
		Результат.ТекстОшибки = СтрШаблон("Ошибка обработки данных: %1", ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

// Процедура выполнения регламентного задания синхронизации справочников из Simphony
// Вызывается автоматически 1 раз в сутки
//
Процедура РегламентноеЗаданиеСинхронизацияСправочников() Экспорт
	
	// Проверяем, включена ли интеграция
	Настройки = MRS_ИнтеграцияSimphonyКлиентСервер.ПолучитьНастройкиИнтеграции();
	
	Если НЕ Настройки.ИспользоватьИнтеграцию Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИмяСобытия = "Синхронизация справочников Simphony";
	
	// Загружаем мажорные группы
	Попытка
		
		РезультатМажорные = ЗагрузитьМажорныеГруппы();
		
		Если НЕ РезультатМажорные.Успех Тогда
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				СтрШаблон("Ошибка загрузки мажорных групп: %1", РезультатМажорные.ТекстОшибки));
			
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СтрШаблон("Критическая ошибка при загрузке мажорных групп: %1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
		
	КонецПопытки;
	
	// Загружаем семейные группы
	Попытка
		
		РезультатСемейные = ЗагрузитьСемейныеГруппы();
		
		Если НЕ РезультатСемейные.Успех Тогда
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				СтрШаблон("Ошибка загрузки семейных групп: %1", РезультатСемейные.ТекстОшибки));
			
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СтрШаблон("Критическая ошибка при загрузке семейных групп: %1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
		
	КонецПопытки;
	
	// Загружаем классы меню
	Попытка
		
		РезультатКлассы = ЗагрузитьКлассыМеню();
		
		Если НЕ РезультатКлассы.Успех Тогда
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				СтрШаблон("Ошибка загрузки классов меню: %1", РезультатКлассы.ТекстОшибки));
			
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СтрШаблон("Критическая ошибка при загрузке классов меню: %1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область HTTPЗапросы

// Выполняет HTTP-запрос к Simphony API
//
// Параметры:
//   Метод - Строка - HTTP метод (GET, POST, PUT, DELETE)
//   АдресРесурса - Строка - путь к ресурсу API (например, "/menu-item")
//   ТелоЗапроса - Строка - тело запроса (JSON строка)
//   Настройки - Структура - настройки интеграции
//
// Возвращаемое значение:
//   Структура - результат HTTP-запроса
//
Функция ВыполнитьHTTPЗапрос(Метод, АдресРесурса, ТелоЗапроса, Настройки)
	
	Результат = Новый Структура;
	Результат.Вставить("КодОтвета", 0);
	Результат.Вставить("ТелоОтвета", "");
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("IDЗапроса", "");
	Результат.Вставить("IDКорреляции", "");
	Результат.Вставить("ВремяВыполнения", 0);
	
	// Разбираем URL
	ЧастиURL = РазобратьURL(Настройки.БазовыйURL);
	Сервер = ЧастиURL.Сервер;
	Порт = ЧастиURL.Порт;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Попытка
		// Создаем соединение
		Соединение = Новый HTTPСоединение(
			Сервер,
			Порт,
			,
			,
			,
			Настройки.Таймаут);
		
		// Формируем заголовки
		Заголовки = MRS_ИнтеграцияSimphonyКлиентСервер.СформироватьЗаголовкиЗапроса();
		Результат.IDЗапроса = Заголовки.Получить("X-Request-Id");
		Результат.IDКорреляции = Заголовки.Получить("X-Correlation-Id");
		
		// Создаем запрос
		Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
		
		Если НЕ ПустаяСтрока(ТелоЗапроса) Тогда
			
			Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
			
		КонецЕсли;
		
		// Выполняем запрос
		Если Метод = "GET" Тогда
			
			Ответ = Соединение.Получить(Запрос);
			
		ИначеЕсли Метод = "POST" Тогда
			
			Ответ = Соединение.ОтправитьДляОбработки(Запрос);
			
		ИначеЕсли Метод = "PUT" Тогда
			
			Ответ = Соединение.Записать(Запрос);
			
		ИначеЕсли Метод = "DELETE" Тогда
			
			Ответ = Соединение.Удалить(Запрос);
			
		Иначе
			
			ВызватьИсключение СтрШаблон("Неподдерживаемый HTTP метод: %1", Метод);
			
		КонецЕсли;
		
		// Получаем результат
		Результат.КодОтвета = Ответ.КодСостояния;
		Результат.ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
		
		Если Результат.КодОтвета < 200 ИЛИ Результат.КодОтвета >= 300 Тогда
			
			Результат.ТекстОшибки = СтрШаблон("HTTP %1: %2", Результат.КодОтвета, Результат.ТелоОтвета);
			
		КонецЕсли;
		
	Исключение
		Результат.ТекстОшибки = СтрШаблон("Ошибка HTTP-запроса: %1", ОписаниеОшибки());
	КонецПопытки;
	
	ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Результат.ВремяВыполнения = (ВремяОкончания - ВремяНачала) / 1000;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ФормированиеДанных

// Формирует структуру данных позиции меню для отправки в API
//
// Параметры:
//   ЭлементМеню - СправочникСсылка.MRS_Меню - ссылка на позицию
//
// Возвращаемое значение:
//   Структура, Неопределено - структура с данными позиции или Неопределено при ошибке
//
Функция СформироватьДанныеПозицииДляAPI(ЭлементМеню)
	
	// Читаем данные элемента
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	MRS_Меню.НомерПозиции КАК НомерПозиции,
		|	MRS_Меню.Наименование КАК Наименование,
		|	MRS_Меню.МажорнаяГруппа.НомерОбъекта КАК МажорнаяГруппаID,
		|	MRS_Меню.СемейнаяГруппа.НомерОбъекта КАК СемейнаяГруппаID,
		|	MRS_Меню.КлассМеню.НомерОбъекта КАК КлассМенюID,
		|	MRS_Меню.НомерВМеню КАК НомерВМеню,
		|	MRS_Меню.Видимость КАК Видимость,
		|	MRS_Меню.IDСтруктурыSimphony КАК IDСтруктурыSimphony
		|ИЗ
		|	Справочник.MRS_Меню КАК MRS_Меню
		|ГДЕ
		|	MRS_Меню.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭлементМеню);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	// Формируем структуру
	Данные = Новый Структура;
	Данные.Вставить("stringNumberId", Выборка.НомерПозиции);
	Данные.Вставить("name", Выборка.Наименование);
	Данные.Вставить("majorGroupId", Выборка.МажорнаяГруппаID);
	Данные.Вставить("familyGroupId", Выборка.СемейнаяГруппаID);
	Данные.Вставить("classItemId", Выборка.КлассМенюID);
	Данные.Вставить("fileNum", Выборка.НомерВМеню);
	Данные.Вставить("isVisible", Выборка.Видимость);
	Данные.Вставить("hierStrucId", Выборка.IDСтруктурыSimphony);
	
	Возврат Данные;
	
КонецФункции

// Формирует JSON-строку для одной позиции меню
//
// Параметры:
//   ДанныеПозиции - Структура - данные позиции
//
// Возвращаемое значение:
//   Строка - JSON-строка
//
Функция СформироватьJSONПозиции(ДанныеПозиции)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, ДанныеПозиции);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// Формирует JSON-строку для пакета позиций меню
//
// Параметры:
//   МассивДанных - Массив - массив структур данных позиций
//   IDТочкиПродаж - Число - ID иерархической структуры
//
// Возвращаемое значение:
//   Строка - JSON-строка
//
Функция СформироватьJSONПакетаПозиций(МассивДанных, IDТочкиПродаж)
	
	Пакет = Новый Структура;
	Пакет.Вставить("hierStrucId", IDТочкиПродаж);
	Пакет.Вставить("items", МассивДанных);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, Пакет);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

#КонецОбласти

#Область ОбновлениеСправочников

// Обновляет или создает элемент справочника MRS_МажорнаяГруппа
//
// Параметры:
//   ДанныеГруппы - Соответствие - данные группы из JSON
//
// Возвращаемое значение:
//   Булево - Истина, если обновлено успешно
//
Функция ОбновитьМажорнуюГруппу(ДанныеГруппы)
	
	Попытка
		// Ищем по НомерОбъекта
		НомерОбъекта = ДанныеГруппы.Получить("objectNumber");
		Наименование = ДанныеГруппы.Получить("name");
		
		Если НомерОбъекта = Неопределено Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		// Ищем существующий элемент
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	MRS_МажорнаяГруппа.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.MRS_МажорнаяГруппа КАК MRS_МажорнаяГруппа
			|ГДЕ
			|	MRS_МажорнаяГруппа.НомерОбъекта = &НомерОбъекта";
		
		Запрос.УстановитьПараметр("НомерОбъекта", НомерОбъекта);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Элемент = Выборка.Ссылка.ПолучитьОбъект();
			
		Иначе
			
			Элемент = Справочники.MRS_МажорнаяГруппа.СоздатьЭлемент();
			Элемент.НомерОбъекта = НомерОбъекта;
			
		КонецЕсли;
		
		Элемент.Наименование = Наименование;
		Элемент.КатегорияПоДиапазону = MRS_ИнтеграцияSimphonyКлиентСервер.ОпределитьКатегориюПоНомеруМажорнойГруппы(
			НомерОбъекта);
		
		Элемент.Записать();
		
		Возврат Истина;
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Обновляет или создает элемент справочника MRS_СемейнаяГруппа
//
// Параметры:
//   ДанныеГруппы - Соответствие - данные группы из JSON
//
// Возвращаемое значение:
//   Булево - Истина, если обновлено успешно
//
Функция ОбновитьСемейнуюГруппу(ДанныеГруппы)
	
	Попытка
		НомерОбъекта = ДанныеГруппы.Получить("objectNumber");
		Наименование = ДанныеГруппы.Получить("name");
		
		Если НомерОбъекта = Неопределено Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		// Ищем существующий элемент
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	MRS_СемейнаяГруппа.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.MRS_СемейнаяГруппа КАК MRS_СемейнаяГруппа
			|ГДЕ
			|	MRS_СемейнаяГруппа.НомерОбъекта = &НомерОбъекта";
		
		Запрос.УстановитьПараметр("НомерОбъекта", НомерОбъекта);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Элемент = Выборка.Ссылка.ПолучитьОбъект();
			
		Иначе
			
			Элемент = Справочники.MRS_СемейнаяГруппа.СоздатьЭлемент();
			Элемент.НомерОбъекта = НомерОбъекта;
			
		КонецЕсли;
		
		Элемент.Наименование = Наименование;
		Элемент.Записать();
		
		Возврат Истина;
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Обновляет или создает элемент справочника MRS_КлассМеню
//
// Параметры:
//   ДанныеКласса - Соответствие - данные класса из JSON
//
// Возвращаемое значение:
//   Булево - Истина, если обновлено успешно
//
Функция ОбновитьКлассМеню(ДанныеКласса)
	
	Попытка
		НомерОбъекта = ДанныеКласса.Получить("objectNumber");
		Наименование = ДанныеКласса.Получить("name");
		
		Если НомерОбъекта = Неопределено Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		// Ищем существующий элемент
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	MRS_КлассМеню.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.MRS_КлассМеню КАК MRS_КлассМеню
			|ГДЕ
			|	MRS_КлассМеню.НомерОбъекта = &НомерОбъекта";
		
		Запрос.УстановитьПараметр("НомерОбъекта", НомерОбъекта);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Элемент = Выборка.Ссылка.ПолучитьОбъект();
			
		Иначе
			
			Элемент = Справочники.MRS_КлассМеню.СоздатьЭлемент();
			Элемент.НомерОбъекта = НомерОбъекта;
			
		КонецЕсли;
		
		Элемент.Наименование = Наименование;
		Элемент.Записать();
		
		Возврат Истина;
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеФункции

// Разбирает URL на части (сервер, порт)
//
// Параметры:
//   URL - Строка - полный URL
//
// Возвращаемое значение:
//   Структура - части URL
//
Функция РазобратьURL(URL)
	
	Результат = Новый Структура;
	Результат.Вставить("Сервер", "");
	Результат.Вставить("Порт", 80);
	
	// Убираем протокол
	URLБезПротокола = URL;
	
	Если СтрНайти(URLБезПротокола, "http://") = 1 Тогда
		
		URLБезПротокола = Сред(URLБезПротокола, 8);
		Результат.Порт = 80;
		
	ИначеЕсли СтрНайти(URLБезПротокола, "https://") = 1 Тогда
		
		URLБезПротокола = Сред(URLБезПротокола, 9);
		Результат.Порт = 443;
		
	КонецЕсли;
	
	// Ищем порт
	ПозицияПорта = СтрНайти(URLБезПротокола, ":");
	ПозицияСлеша = СтрНайти(URLБезПротокола, "/");
	
	Если ПозицияПорта > 0 Тогда
		
		Результат.Сервер = Лев(URLБезПротокола, ПозицияПорта - 1);
		
		Если ПозицияСлеша > 0 Тогда
			
			СтрокаПорта = Сред(URLБезПротокола, ПозицияПорта + 1, ПозицияСлеша - ПозицияПорта - 1);
			
		Иначе
			
			СтрокаПорта = Сред(URLБезПротокола, ПозицияПорта + 1);
			
		КонецЕсли;
		
		Результат.Порт = Число(СтрокаПорта);
		
	Иначе
		
		Если ПозицияСлеша > 0 Тогда
			
			Результат.Сервер = Лев(URLБезПротокола, ПозицияСлеша - 1);
			
		Иначе
			
			Результат.Сервер = URLБезПротокола;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

